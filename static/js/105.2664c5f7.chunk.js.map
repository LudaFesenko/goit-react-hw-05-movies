{"version":3,"file":"static/js/105.2664c5f7.chunk.js","mappings":"mTAEMA,EAAU,mCAGT,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACkBC,EAAAA,EAAAA,IAAU,wBAAyB,CACxDC,OAAQ,CACNC,QAASJ,KAHR,cACCK,EADD,yBAOEA,EAASC,MAPX,kEAUA,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAAyCC,EAAcC,GAAvD,uFACkBP,EAAAA,EAAAA,IAAU,kBAAmB,CAClDQ,OAAQD,EAAWC,OACnBP,OAAQ,CACNC,QAASJ,EACTW,MAAOH,EACPI,KAAM,KANL,cACCP,EADD,yBASEA,EAASC,MATX,kEAYA,SAAeO,EAAtB,iDAAO,OAAP,oBAAO,WAAiCC,EAASL,GAA1C,uFACkBP,EAAAA,EAAAA,IAAA,mBAAsBY,GAAW,CACtDJ,OAAQD,EAAWC,OACnBP,OAAQ,CACNC,QAASJ,KAJR,cACCK,EADD,yBAOEA,EAASC,MAPX,kEAUA,SAAeS,EAAtB,+CAAO,OAAP,oBAAO,WAAiCD,GAAjC,uFACkBZ,EAAAA,EAAAA,IAAA,mBAAsBY,EAAtB,YAAyC,CAC9DX,OAAQ,CACNC,QAASJ,KAHR,cACCK,EADD,yBAMEA,EAASC,MANX,kEASA,SAAeU,EAAtB,+CAAO,OAAP,oBAAO,WAAiCF,GAAjC,uFACkBZ,EAAAA,EAAAA,IAAA,mBAAsBY,EAAtB,YAAyC,CAC9DX,OAAQ,CACNC,QAASJ,KAHR,cACCK,EADD,yBAMEA,EAASC,MANX,kEA3CPJ,EAAAA,EAAAA,SAAAA,QAAyB,6B,sMCDZe,EAAWC,EAAAA,GAAAA,GAAH,yCAIRC,EAAQD,EAAAA,GAAAA,IAAH,4GAOLE,EAAYF,EAAAA,GAAAA,GAAH,4C,kBCetB,EArBiB,SAAC,GAAqD,IAAnDG,EAAkD,EAAlDA,KAAMC,EAA4C,EAA5CA,cAAeC,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,YAC5CC,EAAWD,EAAW,UACrBE,EAAAA,GADqB,OACJF,GACpBG,EAEJ,OACE,UAACV,EAAD,YACE,SAACE,EAAD,CAAOS,IAAKH,EAAUI,IAAKR,KAC3B,SAACD,EAAD,UAAYE,GAAiBD,KAC7B,uCAAeE,OAGpB,ECjBYO,EAAaZ,EAAAA,GAAAA,GAAH,yHC6CvB,EAtCa,WACX,OAAkCa,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAwBF,EAAAA,EAAAA,UAAS,MAAjC,eAAOG,EAAP,KAAaC,EAAb,KACQrB,GAAYsB,EAAAA,EAAAA,IAAU,IAAtBtB,QAiBR,OAfAuB,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,oGAEdL,GAAa,GAFC,UAGOlB,EAAAA,EAAAA,IAAkBD,GAHzB,OAGRyB,EAHQ,OAIdJ,EAAQI,EAAOL,MAJD,yEAMPM,EAAAA,OAAAA,QAAe,yBANR,yBAQdP,GAAa,GARC,4EAAH,qDAWfK,GACD,GAAE,CAACxB,KAGF,gCACGkB,IAAa,SAACS,EAAA,EAAD,KACd,SAACX,EAAD,iBACGI,QADH,IACGA,OADH,EACGA,EAAMQ,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcvB,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,cAAeC,EAA1C,EAA0CA,UAA1C,OACT,SAAC,EAAD,CAEEC,YAAaoB,EACbvB,KAAMA,EACNwB,aAAcvB,EACdC,UAAWA,GAJNoB,EAFE,QAYlB,C,sDC7CM,IAAMjB,EAAiB,iC","sources":["api/index.js","components/CastItem/CastItem.styled.js","components/CastItem/CastItem.jsx","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","constants/index.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'ece71aad9171ec15880a13ae16940cc4';\naxios.defaults.baseURL = 'https://api.themoviedb.org/';\n\nexport async function fetchTrending() {\n  const response = await axios.get('/3/trending/movie/day', {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return response.data;\n}\n\nexport async function fetchMoviesBySearchString(searchString, controller) {\n  const response = await axios.get('/3/search/movie', {\n    signal: controller.signal,\n    params: {\n      api_key: API_KEY,\n      query: searchString,\n      page: 1,\n    },\n  });\n  return response.data;\n}\n\nexport async function fetchMovieDetails(movieId, controller) {\n  const response = await axios.get(`/3/movie/${movieId}`, {\n    signal: controller.signal,\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n}\n\nexport async function fetchMovieCredits(movieId) {\n  const response = await axios.get(`/3/movie/${movieId}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n}\n\nexport async function fetchMovieReviews(movieId) {\n  const response = await axios.get(`/3/movie/${movieId}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n}\n","import styled from 'styled-components';\n\nexport const ItemCast = styled.li`\n  width: 150px;\n`;\n\nexport const Image = styled.img`\n  width: 100%;\n  height: 225px;\n  object-fit: cover;\n  object-position: center;\n`;\n\nexport const NameActor = styled.h3`\n  font-size: 16px;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport defaultPicture from '../../images/defaultPicture.png';\nimport { ItemCast, Image, NameActor } from './CastItem.styled';\nimport { IMAGE_BASE_URL } from '../../constants';\n\nconst CastItem = ({ name, original_name, character, profilePath }) => {\n  const imageSrc = profilePath\n    ? `${IMAGE_BASE_URL}${profilePath}`\n    : defaultPicture;\n\n  return (\n    <ItemCast>\n      <Image src={imageSrc} alt={name} />\n      <NameActor>{original_name || name}</NameActor>\n      <p>Character: {character}</p>\n    </ItemCast>\n  );\n};\n\nCastItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  original_name: PropTypes.string,\n  character: PropTypes.string.isRequired,\n  profilePath: PropTypes.string,\n};\n\nexport default CastItem;\n","import styled from 'styled-components';\n\nexport const StyledCast = styled.ul`\n  list-style: none;\n  display: flex;\n  gap: 10px;\n  flex-wrap: wrap;\n  margin-bottom: 20px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Notify } from 'notiflix';\n\nimport { fetchMovieCredits } from '../../api';\nimport Loader from '../Loader';\nimport CastItem from '../CastItem';\nimport { StyledCast } from './Cast.styled';\n\nconst Cast = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [cast, setCast] = useState(null);\n  const { movieId } = useParams('');\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setIsLoading(true);\n        const result = await fetchMovieCredits(movieId);\n        setCast(result.cast);\n      } catch (error) {\n        return Notify.failure('Something went wrong');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      <StyledCast>\n        {cast?.map(({ id, profile_path, name, original_name, character }) => (\n          <CastItem\n            key={id}\n            profilePath={profile_path}\n            name={name}\n            originalName={original_name}\n            character={character}\n          />\n        ))}\n      </StyledCast>\n    </>\n  );\n};\n\nexport default Cast;\n","export const IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w200';\n"],"names":["API_KEY","fetchTrending","axios","params","api_key","response","data","fetchMoviesBySearchString","searchString","controller","signal","query","page","fetchMovieDetails","movieId","fetchMovieCredits","fetchMovieReviews","ItemCast","styled","Image","NameActor","name","original_name","character","profilePath","imageSrc","IMAGE_BASE_URL","defaultPicture","src","alt","StyledCast","useState","isLoading","setIsLoading","cast","setCast","useParams","useEffect","fetchData","result","Notify","Loader","map","id","profile_path","originalName"],"sourceRoot":""}